public = static파일 모아놓는곳 

app.js = > index.html로 변경되어 전달 

jsx = > js에서 html을 구현할수있도록 도와주는 문법
react는 바로 쓸수있도록 return문에 적용하여 반환
원래는 react.html("<p></P>")이런식으로 써야함 

JSX 문법
- css 적용 
1. 적용할 css 파일 import
2. 태그에 className = "css 이름"

- 외부변수
let post = a
<>{ post }<> 중괄호를 이용하여 삽입
 = > 데이터 바인딩이라함 

return 문에는 병렬태그 금지 단하나의 태그만 
=? 이유 알아보기 
1002 764 367 514
1777 845 609 5981
state를 사용해야 하는 이유
변수는 html에 변경사항이 바로바로 반영되지 않음
(변수의 변경으로는 렌더링이 자동으로 되지않음 ) 
원리 알아보기 + 렌더링이란? (언제 되는지 )


onClick 콜백함수  = > 함수를 전달해야한다. 

스테이트 변경함수는 스테이트에 새로운 값을 할당하는 함수이다 
스테이트 변경함수는 기존값과 값이 같다면 변경 x
렌더링 x
같냐 안같냐는 주소가 같다면 변경 x 값은 변경되더라도 주소가 같으면 렌더링 해주지 않음 

스테이트 변경함수 비교는 == ( === x) 

컴포넌트 = 함수 = 객체 
=> 반복객체는 모두 컴포넌트로 만들기 
=> 큰페이지를 하나 따로 빼네기 코드 길어지는것  
=> 변경사항이 자주되는것들을 컴포넌트로  
( 성능문제? )


div 중복 map을 통해 해결
list.map ( 반복원소 ,  index ) 반환 


props문법은 부모에서 자식으로만 사용 가능 

----------------------------
Hooks

hook의 원리와 왜 써야하는가???


------------------
state는 변경될경우 렌더링이 다시된다
즉 렌더링이 필요없는경우 state로 만들어서는 안된다 
그렇다면 한번에 변경되어 렌더링 되는경우는???
변수로 가지고있다가 재렌더링하면 state로 모두 가져오는가?????

useState 그냥 변수저장

useEffect
= 서버에서 값등을 받아오는 것들
비동기 작업을 여기에 사용한다. 
라이프사일클과 동일하게 사용가능

useEffect는 하나의 컴포넌트에 여러개 사용가능


useEffect(
	() => {
	// 컴포넌트가 마운트된후
// 의존성 배열에 있는 값이 하나라도 바뀌면 실행
// 의존성배열 [] 은 마운트, 언마운트시 만 실행
// 생략시 렌더링 마다 실행


return ()=> {
	//컴포넌트가 마운트 해제 되기전에 실행
}
	
	}, [의존성 변수 1, 2, 3]
);
---------------------------------

useMemo
값을 저장하고 다시 호출할떄는 변경시에만 다시 계산








state는 직접 수정하면 안된다 왜인가???



-----------------------------
이벤트를 arrow 함수로 이용하면 성능이슈가 발생할수 있다!
props로 전달시 재랜더링 이슈

이벤트 추가시 함수를 직접 선언하는것이 아닌 이름을 전달한다 이것이 의미하는것 ㅇ알아보기 

-------------------
component에서 null을 리턴하면 아무것도 하지 않는다 

근데 자리도 망가짐 좋은것 같지는 않음 







